Functional Requirements
1. The simulator must emulate the behavior of processor registers, like program counter or instruction register
2. UVSim should prompt input and output operations to simulate interactions like reading and writing
3. The simulator should provide debugging features like breakpoints and steps.
4. Comprehensive documentation should be provided to guide users on how to work the simulator
5. The application must display all output from the user’s machine code to the screen.
6. The application must validate user input and prompt the user again if invalid input was entered with failsafe catch-blocks
7. The project should work with Windows, Mac, and Linux operating systems.
8. The project must be organized to scale for future additional BasicML instructions and processing.
9. The project must be able to hold 100 slots of memory and process instructions stored in the memory.
10. The project should log files read, instructions entered by the user, and instructions written to the user. 
11. Load Program: The system should allow users to load BasicML programs from text files into the UVSimulator's memory and validate the instructions.
12. Execute Program: The system should execute the loaded BasicML program stored in memory.
13. Load Instruction: The system should load the value from memory into the accumulator when encountering a LOAD instruction. 
14. Store Instruction: The system should store the value in the accumulator into memory when encountering a STORE instruction. 
15. Math Execution: They system should be able to perform different mathematical operations with the accumulator and the system memore, such as addiction, subtraction, division, and multiplication.
16. Halt Instruction: The system should stop program execution when encountering a HALT instruction or stop at line 99 if no HALT exists.
17. File Loading Functionality: The GUI should provide functionality to load a BasicML program and include a file selection mechanism and a button to trigger the loading process.
18. Display Output: The GUI should display the output generated by the UVSimulator during program execution, including the contents of the accumulator and any error messages.
19. User Input: The GUI should allow users to input values during program execution, particularly for operations like READ. The GUI should also provide an input field where users can input their values.
20. Execution Control: The GUI should provide controls for starting, pausing, and resetting program execution. These buttons include start, pause/resume, and reset functionality.
21. Extended File Support: The application must support data files containing up to 250 lines of BasicML instructions. Memory registers should correspondingly expand from 000 to 249. This includes the ability to handle three-digit memory addresses and six-digit words in the new file format.
22. Input Validation: The application should validate user input and prevent the loading or editing of files with more than 250 lines, ensuring adherence to the file size limit.
23. Six-Digit Math Operations: The application must correctly handle arithmetic operations involving six-digit numbers, including overflow handling.
24. Function Code Update: The application should update function codes for operations to include a leading zero, reflecting the transition to six-digit word formats.
25. Support for Old and New File Formats: The application must support both old (4-digit word) and new (6-digit word) file formats. Users should be able to load, edit, and execute files in both formats separately. Mixing 4 and 6 digit words within a single file is not permitted.
26. Visual Customization: The GUI should allow customization of its elements, including background colors, text colors, and other visual properties to enhance user experience. 
27. Scalability: The application should allow users to open and work with multiple files simultaneously within the same instance. Users should be able to switch between, edit, and execute each file independently within the application interface.

Non-Functional Requirements
1. UVSim should implement security measures to protect user data and prevent unauthorized access.
2. Must be responsive, no more than 30ms delay when between the ui element being clicked and action occurring, and applications must load the file within 5 seconds
3. Usability: Users should be able to complete common tasks within the UVSim interface, such as loading programs, executing instructions, and debugging, with minimal guidance or assistance. 
Success will be measured by the completion time of each task and the accuracy of users’ interactions, as well as feedback gathered through surveys or interviews regarding the clarity of instructions and ease of navigation.
4. Tabs Implementation: Tabs will be used to switch between instances of file simulations.





